:: ./script.js
; variables
window.onload = () =>
{
  ; set status to disconnected
  ; create websocket
  ; set websocket callbacks
};

;; create websocket
const socket = new WebSocket("ws://localhost:8090/ws");

;; set websocket callbacks
socket.onopen = (event) => {
  ; set status to connected
};

socket.onclose = (event) => {
  ; set status to disconnected
};

socket.onclose = (event) => {
  ; set status to error
};

socket.onmessage = (event) => {
  console.log(event);
  ; if message is text
  ; if message is binary
};

;; set status to connected
const status = document.getElementById("connection-status");
const p = status.firstElementChild;
p.textContent = "connected";
p.style.color = "#444";
; show kernel status

;; set status to disconnected
const status = document.getElementById("connection-status");
const p = status.firstElementChild;
p.textContent = "disconnected";
p.style.color = "#444";
; hide kernel status

;; set status to error
const status = document.getElementById("connection-status");
const p = status.firstElementChild;
p.textContent = "error";
p.style.color = "#b66";
console.log(event);
; hide kernel status

;; hide kernel status
const kernel_status = document.getElementById("kernel-status");
kernel_status.style.display = "none";

;; show kernel status
const kernel_status = document.getElementById("kernel-status");
kernel_status.style.display = "block";

;; if message is text
if(typeof event.data == "string")
{
  ; decode message json
  ; if message is output
  ; if message is notify
}

;; decode message json
const msg = JSON.parse(event.data);

;; if message is output
if(msg.cmd == "output")
{
  ; read task id
  ; if task id is same as previous append to existing
  ; otherwise create new and append
}

;; read task id
const task_id = msg.data.task_id;

;; variables
var previous_task_id = null;
var previous_cell;

;; if task id is same as previous append to existing
if(task_id === previous_task_id)
{
  previous_cell.textContent += msg.data.text;
}

;; otherwise create new and append
else
{
  ; get output element
  ; get current date
  ; create cell in output element
  ; set text content with message
  ; set previous task id
  ; append cell to output
}

;; get output element
const output = document.getElementById("output");

;; get current date
const today = new Date();
const time_iso = today.toLocaleString();

;; create cell in output element
const cell = document.createElement("div");
cell.classList.add("cell");

const cell_date = document.createElement("div");
cell_date.classList.add("cell-date");
cell_date.textContent = time_iso
cell.appendChild(cell_date);

const cell_output = document.createElement("div");
cell_output.classList.add("cell-output");
cell.appendChild(cell_output);

;; set previous task id
previous_task_id = task_id;
previous_cell = cell_output;

;; set text content with message
cell_output.textContent = msg.data.text;

;; append cell to output
output.appendChild(cell);

;; if message is notify
else if(msg.cmd == "notify")
{
  ; if message notify is running
  ; if message notify is idle
}

;; if message notify is running
if(msg.data.status == "running")
{
  var section_name = msg.data.section;
  ; trim if section name is too long
  ; start playing running animation
}

;; if message notify is idle
else if(msg.data.status == "idle")
{
  ; request to put idle in kernel status
}

;; trim if section name is too long
if(section_name.length > 16)
{
  section_name = section_name.substr(0,16) + "...";
}

;; variables
var status_animation = null;

;; start playing running animation
; abort previous animation if any
; abort any idle request

const kernel_status = document.getElementById("kernel-status").firstElementChild;
kernel_status.textContent = "";

status_animation = setInterval((kernel_status, section_name) => {
  const curLength = kernel_status.textContent.length;
  if(curLength < section_name.length)
  {
    kernel_status.textContent += section_name[curLength];
  }
  else
  {
    clearInterval(status_animation);
    status_animation = null;
    ; set running animation end time
  }
}, 25, kernel_status, section_name);

;; abort previous animation if any
if(status_animation !== null)
{
  clearInterval(status_animation);
  status_animation = null;
}

;; variables
var idle_request = null;

;; request to put idle in kernel status
; abort any idle request

idle_request = setInterval(() => {
  ; get current timer
  ; if enough time has passed set idle
}, 100);

;; variables
var endAnimTime = performance.now();

;; get current timer
const nowTime = performance.now();

;; set running animation end time
endAnimTime = performance.now();

;; if enough time has passed set idle
if(status_animation === null && nowTime - endAnimTime > 1000)
{
  const kernel_status = document.getElementById("kernel-status").firstElementChild;
  kernel_status.textContent = "idle";
  clearInterval(idle_request);
  idle_request = null;
}

;; abort any idle request
if(idle_request !== null)
{
  clearInterval(idle_request);
  idle_request = null;
}
