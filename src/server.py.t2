;;; ntpy-server
:: ../ntpy/server.py
; imports
; classes
; variables
; define functions
; if standalone start server

;; imports
import asyncio
import json

;; define functions
async def start_server(host='localhost', port=8089):
	; use ntpy matplotlib backend
	server = await asyncio.start_server(on_connect, host, port)
	print(f"Server started on {port}")
	async with server:
		await server.serve_forever()

;; define functions
async def on_connect(reader, writer):
	; server variables
	print("Client connected.")
	; client variables
	while True:
		try:
			data = await reader.readline()
		except:
			break
		print(data)
		if len(data) == 0:
			break
		msg = json.loads(data)
		status = "Done"
		; check that message is well formed
		; handle message
		; if not handeld fail
		; send response back
		; notify that message has been received
		await asyncio.sleep(0)

	print("Client disconnected.")
	writer.close()
	await writer.wait_closed()

;; check that message is well formed
assert("cmd" in msg)

;; send response back
response = json.dumps({"status" : status}) + '\n'
writer.write(response.encode())
await writer.drain()

;; if not handeld fail
else:
	status = f"Unknown command {msg['cmd']}"

;; if standalone start server

if __name__ == "__main__":
	async def main():
		; create event objects
		executor_task = asyncio.create_task(start_executor())
		server_task = asyncio.create_task(start_server())
		frontend_server_task = asyncio.create_task(start_frontend_server())
		try:
			await server_task
		except asyncio.CancelledError:
			pass
	asyncio.run(main())
