;;; ntpy-server
;; define functions
async def start_executor():
  global pending_sections
  ; executor variables
  while True:
    ; execute pending sections
    ; clear pending sections
    ; execute loop section if defined
    ; if no pending sections go into deep sleep
    await asyncio.sleep(0)

;; execute pending sections
for name in pending_sections:
  ; fetch code for section
  ; notify front that kernel is running section
  ; execute code for section

;; clear pending sections
pending_sections = []

;; executor variables
global tangled

;; fetch code for section
if name in tangled:
  code = "\n".join(tangled[name])
else:
  continue

;; execute code for section
try:
  ; redirect to custom stdout
  exec(code)
  ; restore to default stdout
except Exception as e:
  ; restore to default stdout
  print(f"Exception {e}")
  ; send exception to frontend

;; execute loop section if defined
if "loop" in tangled:
  code = "\n".join(tangled["loop"])
  try:
    ; if enough delay passed notify frontend that loop is running
    ; redirect to custom stdout
    exec(code)
    ; restore to default stdout
  except Exception as e:
    ; restore to default stdout
    print(f"Exception {e}")
    ; send exception to frontend

;; if no pending sections go into deep sleep
if "loop" not in tangled or "".join(tangled["loop"]) == "":
  ; notify front that kernel is idle
  await message_received_event.wait()
  message_received_event.clear()

;; executor variables
global message_received_event

;; create event objects
global message_received_event
message_received_event = asyncio.Event()

;; server variables
global message_received_event

;; notify that message has been received
message_received_event.set()
