;;; ../ntpy-server
;; define functions
async def start_frontend_server(host='localhost', port=8090):
	server = await asyncio.start_server(on_frontend_connect, host, port)
	print(f"Front server started on {port}")
	async with server:
		await server.serve_forever()


;; define functions
async def on_frontend_connect(reader, writer):
	print("Connected to frontend")
	; front client variables
	ws_mode = False
	while True:
		if ws_mode:
			; await on read
			; handle ws message
		else:
			http_msg = []
			; read http msg
			if len(http_msg) == 0:
				break
			; handle http message frontend

	; stop frontend writer tasks
	writer.close()
	await writer.wait_closed()

;; read http msg
while True:
	try:
		line = await reader.readline()
	except Exception as e:
		http_msg.clear()
		break
	if len(line) == 0:
		http_msg.clear()
		break
	if line == b'\r\n':
		break
	http_msg.append(line[:-2])

;; handle http message frontend
; decode http message method
; send http response back depending on method
else:
	print(f"Unknown method {method}")

;; decode http message method
first_line = http_msg[0]
space = first_line.find(b' ')
if space == -1:
	continue
method = first_line[:space]
rest = first_line[space+1:]

;;- send http response back depending on method
if method == b'GET':
	; decode get path
	; do routing
	else:
		print(f"Unknown route {route.decode('utf-8')}")

;; decode get path
space = rest.find(b' ')
if space == -1:
	continue
route = rest[:space]
rest = rest[space+1:]

;; define functions
async def write_http_message(writer, lines, body=None):
	for line in lines:
		writer.write((line + '\r\n').encode())
	writer.write(b'\r\n')
	if body is not None:
		writer.write(body)
	await writer.drain()

;; imports
from pathlib import Path

;;- do routing
if route == b'/' or route == b'/script.js' or route == b'/styles.css' or route == b'/popup_latex.html':
	filename = route[1:].decode('utf-8')
	if filename == "":
		filename = "index.html"
	path = Path(__file__)
	f = open(path.parent.parent / "frontend" / filename, "r")
	content = f.read().encode('utf-8')

	content_type = ""
	if filename == 'index.html':
		content_type = 'text/html'
	elif filename == 'script.js':
		content_type = 'text/javascript'
	elif filename == 'styles.css':
		content_type = 'text/css'
	else:
		content_type = f'text/{filename.split('.')[1]}'

	msg_lines = [
		"HTTP/1.1 200 OK",
		f"Content-Length: {len(content)}",
		f"Content-Type: {content_type}; charset=UTF-8",
	]
	await write_http_message(writer, msg_lines, content)
