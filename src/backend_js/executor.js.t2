;;; ntpy_js
;; variables
var execute_scheduled = false;

;; functions
function executor()
{
  execute_scheduled = false;

  ; executor variables
  ; execute pending sections
  ; notify front that kernel is idle
  ; clear pending sections
  ; execute loop section if defined
  ; if loop schedule executor for next iteration
}

;; notify that message has been received
if(!execute_scheduled)
{
  execute_scheduled = true;
  setTimeout(executor, 0);
}

;; execute pending sections
for(const name of pending_sections)
{
  ; fetch code for section
  ; execute code for section
}

;; clear pending sections
pending_sections = [];

;; fetch code for section
var code;
if(name in tangled)
{
  code = tangled[name].join("\n");
}
else
{
  continue;
}

;; execute code for section
try
{
  ; redirect to custom stdout
  eval(code);
  ; restore to default stdout
  ; send notify that code executed without issues
}
catch(error)
{
  ; restore to default stdout
  console.log(error);
  ; send exception to frontend
}

;; execute loop section if defined
var code_loop = "";
if("loop" in tangled)
{
  const name = "loop";
  code_loop = tangled["loop"].join("\n");
  try
  {
    ; redirect to custom stdout
    eval(code_loop);
    ; restore to default stdout
  }
  catch(error)
  {
    ; restore to default stdout
    console.log(error);
    ; send exception to frontend
    ; kill loop if exception
    ; notify front that loop is not running
  }
}

;; if loop schedule executor for next iteration
if(code_loop.length > 0)
{
  execute_scheduled = true;
  setTimeout(executor, 0);
}
