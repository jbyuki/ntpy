;;; protean_js
:: ../../protean_js/server.js
; requires
; variables
; functions

; create server
; create websocket server
; listen server
; create server for frontend
; listen frontend server

;; requires
const net = require('node:net');

;; create server
const server = net.createServer((c) => {
  console.log('client connected');
  c.on('data', (data) => {
    ; load json
    ; intercept if server message
    ; send msg to connected clients
    ; send response back
  });
  c.on('end', () => {
    console.log('client disconnected');
    c.end();
  });

  c.on('error',function(err){
    throw err;
  });

  c.on('close',function(error){
    console.log('client closed');
  });
}, {  });

server.on('error', (err) => {
  throw err;
});

;; listen server
const port = 8089;
server.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});

;; load json
const msg = JSON.parse(data.toString());

;; send response back
c.write(JSON.stringify({"status": "Done"}) + "\n");

;; requires
const ws = require("ws");

;; variables
var ws_clients = [];

;; create websocket server
const wss = new ws.WebSocketServer({port: 8091});

wss.on('connection', (ws) => {
  console.log('websocket client connected');
  ; add ws client
  ws.on('error', console.error);
  ws.on('message', (data) => {
    ; handle ws message
  });
  ws.on('close', () => {
    console.log('websocket client disconnected');
    ; remove ws client
  });
});

;; add ws client
ws_clients.push(ws);

;; remove ws client
const idx = ws_clients.indexOf(ws);
if(idx != -1)
{
  ws_clients.splice(idx, 1);
}

;; requires
const http = require('node:http');

;; create server for frontend
const frontend_server = http.createServer((req, res) => {
  var content = "";
  var content_type = "";
  ; parse request
  ; read content if present
});

;; listen frontend server
const frontend_port = 8090;
frontend_server.listen(frontend_port, () => {
  console.log(`Frontend Server listening on port ${frontend_port}`);
});

;; requires
const fs = require('fs');
const path = require('path');

;; parse request
var url = req.url;
if(url == '/')
{
  url = '/index.html';
}

const filepath = path.join(path.dirname(path.dirname(__filename)), 'frontend', 'frontend_js', url);
console.log(url);
const ext = path.extname(filepath);

;; read content if present
fs.readFile(filepath, 'utf8', (err, data) => {
  if(!err && data)
  {
    ; if index html inject import map
    ; send content type depending on extension
    ; send content
  }
});

;; send content type depending on extension
var content_type = 'text/plain';
if(ext == '.html')
{
  content_type = 'text/html';
}
else if(ext == '.js')
{
  content_type = 'text/javascript';
}
else if(ext == '.css')
{
  content_type = 'text/css';
}
res.writeHead(200, { 
  'Content-Type': content_type,
  'Access-Control-Allow-Origin': 'http://localhost:8090',
  'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE'
});

;; send content
res.end(data);

;; send msg to connected clients
for(var i=0; i<ws_clients.length; i++)
{
  ws_clients[i].send(data.toString());
}

;; handle ws message
; parse ws message to json
; if ws message is file read request
; if ws message is file binary read request

;; parse ws message to json
const ws_msg = JSON.parse(data);
console.log(ws_msg);
