;;; ntpy-server
;; define functions
async def start_frontend_server(host='localhost', port=8090):
	server = await asyncio.start_server(on_frontend_connect, host, port)
	print(f"Front server started on {port}")
	async with server:
		await server.serve_forever()


;; define functions
async def on_frontend_connect(reader, writer):
	print("Connected to frontend")
	; front client variables
	ws_mode = False
	while True:
		if ws_mode:
			; await on read
			; handle ws message
		else:
			http_msg = []
			; read http msg
			if len(http_msg) == 0:
				break
			; handle http message frontend

	; stop frontend writer tasks
	writer.close()
	await writer.wait_closed()

;; read http msg
while True:
	try:
		line = await reader.readline()
	except Exception as e:
		http_msg.clear()
		break
	if len(line) == 0:
		http_msg.clear()
		break
	if line == b'\r\n':
		break
	http_msg.append(line[:-2])

;; handle http message frontend
; decode http message method
; send http response back depending on method
else:
	print(f"Unknown method {method}")

;; decode http message method
first_line = http_msg[0]
space = first_line.find(b' ')
if space == -1:
	continue
method = first_line[:space]
rest = first_line[space+1:]

;;- send http response back depending on method
if method == b'GET':
	; decode get path
	; do routing

;; decode get path
space = rest.find(b' ')
if space == -1:
	continue
route = rest[:space]
rest = rest[space+1:]

;; define functions
async def write_http_message(writer, lines, body=None):
	for line in lines:
		writer.write((line + '\r\n').encode())
	writer.write(b'\r\n')
	if body is not None:
		writer.write(body)
	await writer.drain()

;;- do routing
if route == b'/':
	content = '<!doctype html><html><head><meta=charset=utf-8><title>blah</title></head><body><p>Hello world :)</p></body></html>'.encode('utf-8')
	msg_lines = [
		"HTTP/1.1 200 OK",
		f"Content-Length: {len(content)}",
		"Content-Type: text/html; charset=UTF-8",
	]
	await write_http_message(writer, msg_lines, content)
