;;; ntpy-server
;; do routing
elif route == b'/ws':
  ; read websocket handshake
  ; send back websocket handshake
  ; switch to ws mode
  ; start writer task

;; read websocket handshake
ws_keys = {}
for line in http_msg[1:]:
  line = line.decode()
  sep = line.find(':')
  if sep == -1:
    continue
  key = line[:sep].strip()
  val = line[sep+1:].strip()
  ws_keys[key] = val
  print(line)

assert(ws_keys["Upgrade"] == "websocket")
assert(ws_keys["Connection"] == "Upgrade")
ws_key = ws_keys["Sec-WebSocket-Key"]
assert(ws_keys["Sec-WebSocket-Version"] == "13")

;; imports
import hashlib
import base64

;; send back websocket handshake
hash = hashlib.sha1((ws_key + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11").encode())
base64hash = base64.b64encode(hash.digest())
msg_lines = [
  "HTTP/1.1 101 Switching Protocols",
  "Upgrade: websocket",
  "Connection: Upgrade",
  f"Sec-WebSocket-Accept: {base64hash.decode()}",
]
await write_http_message(writer, msg_lines)
print("Websocket handshake done")

;; switch to ws mode
ws_mode = True

;; await on read
while True:
  data = await reader.read(1)
  fin = data[0] & 0x80 == 0x80
  if data[0] & 0xF != 0:
    opcode = data[0] & 0xF

  data = await reader.read(1)
  assert(data[0] & 0x80 == 0x80) # Client message must be masked

  ; read payload length
  ; read masking key
  ; read payload
  ; unmask payload and add it to buffer

  if fin:
    break

;; imports
import struct

;; read payload length
paylen = data[0] & 0x7F
if paylen == 126:
  data = await reader.read(2)
  paylen = struct.unpack("!H", data)[0]
elif paylen == 127:
  data = await reader.read(8)
  paylen = struct.unpack("!Q", data)[0]

;; read masking key
masking = await reader.read(4)

;; read payload
payload = await reader.read(paylen)

;;- await on read
readbuffer = []

;; unmask payload and add it to buffer
for i in range(len(payload)):
  readbuffer.append(payload[i] ^ masking[i%4])

;; handle ws message
if opcode == 0x1:
  s = ""
  for c in readbuffer:
    s += chr(c)
  print(s)
else:
  print(readbuffer)

;; define functions
async def frontend_writer(writer):
  ; write ws message
  
;; start writer task
asyncio.create_task(frontend_writer(writer))

;; define functions
def text_ws_msg(txt):
  txt = txt.encode('utf-8')
  paylen = len(txt)
  msg = [0x81]
  ; encode paylength
  ; put payload data
  return struct.pack(f"{len(msg)}B", *msg)

;; encode paylength
if paylen <= 125:
  msg.append(paylen)
elif paylen <= ((1 << 16) - 1):
  msg.append(126)
  for b in struct.pack("!H", paylen):
    msg.append(b)
else:
  msg.append(127)
  for b in struct.pack("!Q", paylen):
    msg.append(b)

;; put payload data
msg += txt

;; write ws message
writer.write(text_ws_msg("hello client!"))
await writer.drain()
