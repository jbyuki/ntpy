;;; ntpy-server
;;- handle message
if msg["cmd"] == "execute":
	; check message format for execute
	; add or replace section to database
	; retangle all sections
	; add or replace parent section to running sections
	; increase task id

;; check message format for execute
assert("data" in msg)
data = msg["data"]
assert("name" in data)
assert("lines" in data)

;; variables
sections = {}

;; client variables
global sections

;; add or replace section to database
name = data["name"]
lines = data["lines"]
sections[name] = lines

;; variables
tangled = {}

;; client variables
global tangled

;; define functions
def tangle_rec(name, sections, tangled, parent_section, blacklist, prefix):
	; return if name in blacklist
	; add name to blacklist
	if name not in sections:
		return []
	if name in tangled:
		return tangled[name]
	lines = []
	for line in sections[name]:
		; if line is literate reference recurse
		; otherwise just add line to list
	tangled[name] = lines
	; pop blacklist
	return lines

;; retangle all sections
tangled = {}
; clear retangling all

blacklist = []
for section_name in sections.keys():
	tangle_rec(section_name, sections, tangled, parent_section, blacklist, "")

;; if line is literate reference recurse
if re.match("^\\s*;[^;].*", line):
	; extract reference name
	; recurse and add lines from reference

;; otherwise just add line to list
else:
	lines.append(line)

;; imports
import re

;; extract reference name
match = re.match("^(\\s*);([^;].*)", line)
new_prefix = match[1]
ref_name = match[2].strip()
; add parent to reference

;; add name to blacklist
blacklist.append(name)

;; pop blacklist
blacklist.pop()

;; return if name in blacklist
if name in blacklist:
	return []

;; recurse and add lines from reference
ref_lines = tangle_rec(ref_name, sections, tangled, parent_section, blacklist, prefix+new_prefix)
if len(ref_lines) > 0:
	for ref_line in ref_lines:
		lines.append(prefix + new_prefix + ref_line)
else:
	lines.append(prefix + new_prefix + "pass")

;; client variables
parent_section = {}

;; clear retangling all
parent_section = {}

;; add parent to reference
if ref_name not in parent_section:
	parent_section[ref_name] = []

if name not in parent_section[ref_name]:
	parent_section[ref_name].append(name)

;; variables
pending_sections = []

;; client variables
global pending_sections

;; add or replace parent section to running sections
if data["execute"]:
	has_loop_parent = False
	; check if any parent is loop
	if not has_loop_parent:
		pending_sections.append(name)

;; check if any parent is loop
open = [name]
closed = set()
closed.add(name)
while len(open) > 0:
	current = open.pop()
	if current == "loop":
		has_loop_parent = True
		break
	
	if current in parent_section:
		for parent in parent_section[current]:
			if parent not in closed:
				open.append(parent)
				closed.add(current)
